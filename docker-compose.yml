version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: train-postgres
    environment:
      POSTGRES_USER: ${DB_USERNAME:-trainuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME:-traindb}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - train-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-trainuser} -d ${DB_NAME:-traindb}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: train-backend
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${DB_USERNAME:-trainuser}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME:-traindb}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - train-network
    restart: unless-stopped

networks:
  train-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
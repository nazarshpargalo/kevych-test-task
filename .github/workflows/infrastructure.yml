name: Deploy Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Action to perform"
        required: true
        default: "apply"
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.6.0
  STATE_BUCKET: terraform-state-train-app
  LOCK_TABLE: terraform-state-lock

jobs:
  terraform:
    name: Terraform ${{ github.event.inputs.action }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Create S3 Backend (if needed)
        run: |
          # Create S3 bucket if it doesn't exist
          aws s3api head-bucket --bucket ${{ env.STATE_BUCKET }} 2>/dev/null || \
          aws s3api create-bucket --bucket ${{ env.STATE_BUCKET }} --region ${{ env.AWS_REGION }}

          # Create DynamoDB lock table if it doesn't exist
          aws dynamodb describe-table --table-name ${{ env.LOCK_TABLE }} 2>/dev/null || \
          aws dynamodb create-table \
            --table-name ${{ env.LOCK_TABLE }} \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST \
            --region ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ env.STATE_BUCKET }}" \
            -backend-config="key=train-app/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ env.LOCK_TABLE }}" \
            -backend-config="encrypt=true"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        if: github.event.inputs.action != 'destroy'
        run: |
          terraform plan \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="jwt_secret=${{ secrets.JWT_SECRET }}" \
            -out=tfplan

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        run: |
          terraform apply -auto-approve tfplan

          # Show outputs in summary
          echo "## ðŸš€ Infrastructure Deployed" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          terraform output >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: |
          # Empty S3 bucket before destroying
          BUCKET=$(terraform output -raw s3_bucket_name 2>/dev/null || echo "")
          if [ -n "$BUCKET" ]; then
            echo "Emptying S3 bucket: $BUCKET"
            aws s3 rm s3://$BUCKET --recursive || true
          fi

          terraform destroy -auto-approve \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="jwt_secret=${{ secrets.JWT_SECRET }}"
